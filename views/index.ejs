<div class="container">
    <% if (passenger) { %>
        
      <h1 class="greeting">Witaj, <%= passenger.name %> <%= passenger.surname %>!</h1>
    <% } %>
    <form id="connection-finder" method="GET" action="timetable">
        <h2 class="reservation-title">Rezerwacja</h2>
        <div class="ticket-type">
            <label>
                <input type="radio" name="ticket_type" value="normalny" checked>
                Bilet normalny
            </label>
            <label>
                <input type="radio" name="ticket_type" value="ulgowy">
                Bilet ulgowy
            </label>
        </div>
        <div class="form-row">
            <div class="form-group date-group">
                <label for="departure_date">Data odjazdu:</label>
                <input type="date" id="departure_date" name="departure_date" required min="<%= new Date().toISOString().split('T')[0] %>" value="<%= new Date().toISOString().split('T')[0] %>">
            </div>
            <div class="form-group line-group">
                <label for="line_code">Linia:</label>
                <select id="line_code" name="line_code_direction">
                    <% lines.forEach(function(line) { %>
                        <option value="<%= line.line_code %>_<%= line.direction %>"><%= line.line_name %></option>
                    <% }); %>
                </select>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group from-group">
                <label for="departure_from">Wyjazd z:</label>
                <select id="departure_from" name="departure_from">
                </select>
            </div>
            <div class="form-group to-group">
                <label for="departure_to">Przyjazd do:</label>
                <select id="departure_to" name="departure_to">
                </select>
            </div>
        </div>
        <button type="submit" class="btn btn-primary login-btn">Szukaj</button>

        
    </form>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const lineCodeSelect = document.getElementById('line_code');
            const fromSelect = document.getElementById('departure_from');
            const toSelect = document.getElementById('departure_to');
            let stopsCache = {};

            function parseLineCodeAndDirection(value) {
                console.log('Parsing value:', value);
                const idx = value.lastIndexOf('_');
                const lineCode = value.substring(0, idx);
                const direction = value.substring(idx + 1);
                console.log('Parsed lineCode:', lineCode, 'direction:', direction);
                return [lineCode, direction];
            }

            async function fetchStops(lineCode, direction) {
                const currentPath = window.location.pathname;
                let basePath = '/';
                if (currentPath.includes('/p13/')) {
                    basePath = '/p13/';
                }
                const url = `${basePath}api/lines/${lineCode}/${direction}/stops`;
                console.log('Fetching stops from:', url);
                try {
                    const res = await fetch(url);
                    console.log('Response status:', res.status);
                    if (!res.ok) {
                        console.error('Response not OK:', res.status, res.statusText);
                        return [];
                    }
                    const data = await res.json();
                    console.log('Fetched stops:', data);
                    return data;
                } catch (error) {
                    console.error('Error fetching stops:', error);
                    return [];
                }
            }

            function populateFromStops(stops) {
                console.log('populateFromStops called with:', stops);
                fromSelect.innerHTML = '';
                if (!stops || stops.length === 0) {
                    console.log('No stops to populate');
                    // Odśwież custom-select nawet jeśli pusto
                    fromSelect.dispatchEvent(new Event('change'));
                    if (window.renderCustomSelectOptions) {
                        const wrapper = fromSelect.closest('.custom-select');
                        if (wrapper) window.renderCustomSelectOptions(wrapper);
                    }
                    return;
                }
                stops.forEach(stop => {
                    const opt = document.createElement('option');
                    opt.value = stop.line_stop_id;
                    opt.textContent = stop.stop_name;
                    opt.dataset.sequence = stop.sequence;
                    fromSelect.appendChild(opt);
                });
                console.log('Populated', stops.length, 'stops');
                fromSelect.dispatchEvent(new Event('change'));
                if (window.renderCustomSelectOptions) {
                    const wrapper = fromSelect.closest('.custom-select');
                    if (wrapper) window.renderCustomSelectOptions(wrapper);
                }
            }

            function populateToStops(stops, fromSeq) {
                toSelect.innerHTML = '';
                stops.filter(stop => stop.sequence > fromSeq).forEach(stop => {
                    const opt = document.createElement('option');
                    opt.value = stop.line_stop_id;
                    opt.textContent = stop.stop_name;
                    toSelect.appendChild(opt);
                });
                toSelect.dispatchEvent(new Event('change'));
                if (window.renderCustomSelectOptions) {
                    const wrapper = toSelect.closest('.custom-select');
                    if (wrapper) window.renderCustomSelectOptions(wrapper);
                }
            }

            async function updateStops() {
                console.log('updateStops called, lineCodeSelect.value:', lineCodeSelect.value);
                const [lineCode, direction] = parseLineCodeAndDirection(lineCodeSelect.value);
                const cacheKey = `${lineCode}_${direction}`;
                console.log('Cache key:', cacheKey);
                if (!stopsCache[cacheKey]) {
                    console.log('Cache miss, fetching stops...');
                    const stops = await fetchStops(lineCode, direction);
                    stopsCache[cacheKey] = stops;
                } else {
                    console.log('Cache hit, using cached stops');
                }
                console.log('Populating from stops with:', stopsCache[cacheKey]);
                populateFromStops(stopsCache[cacheKey]);
            }

            lineCodeSelect.addEventListener('change', function() {
                console.log('Line selection changed to:', lineCodeSelect.value);
                updateStops();
            });

            fromSelect.addEventListener('change', function() {
                const [lineCode, direction] = parseLineCodeAndDirection(lineCodeSelect.value);
                const cacheKey = `${lineCode}_${direction}`;
                const stops = stopsCache[cacheKey] || [];
                const selectedOption = fromSelect.selectedOptions[0];
                if (selectedOption) {
                    const fromSeq = parseInt(selectedOption.dataset.sequence);
                    populateToStops(stops, fromSeq);
                }
            });

            updateStops();
        });
    </script>
    <script src="js/custom-select.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        if (window.renderCustomSelectOptions === undefined) {
            const csScript = document.querySelector('script[src*="custom-select.js"]');
            if (csScript) {
                if (typeof renderCustomSelectOptions === 'function') {
                    window.renderCustomSelectOptions = renderCustomSelectOptions;
                } else {
                }
            }
        }
    });
    </script>
</div>
